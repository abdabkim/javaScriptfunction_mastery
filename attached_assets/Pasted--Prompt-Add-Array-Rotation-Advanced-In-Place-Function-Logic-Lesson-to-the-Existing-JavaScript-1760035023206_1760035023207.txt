üß† Prompt: Add ‚ÄúArray Rotation & Advanced In-Place Function Logic‚Äù Lesson to the Existing JavaScript Function Mastery Website
You are to expand the existing JavaScript Function Mastery website by adding a new comprehensive topic titled:
‚ÄúArray Rotation & In-Place Algorithmic Thinking‚Äù
This is not a new website ‚Äî it is an additional topic under the current JavaScript Function Mastery platform.
It must match the current site‚Äôs styling, responsiveness, animations, tone, formatting, and interactivity.
No current functionality should break or change.
________________________________________
üéØ Purpose of the Update
The new topic should teach learners how to use JavaScript functions to solve real algorithmic problems ‚Äî specifically, array rotation ‚Äî while explaining both basic and optimal approaches using function-based logic.
It should train learners to think step-by-step, understand function composition, and grasp in-place operations that demonstrate deep programming understanding.
________________________________________
üß© New Lesson Title and Structure
Topic Title:
Array Rotation & Advanced In-Place Function Logic
Lesson Sections:
1.	Introduction to Array Rotation
o	Explain what array rotation means (shifting elements in a sequence).
o	Real-world example (e.g., rotating slides, playlists, or task orders).
o	Visual illustration (animated example of an array rotating step-by-step).
2.	Initial Steps and Simplification
o	Explain the concept of rotation steps (k).
o	Explain over-rotation and how to handle it using modulo (%).
o	Add real-time visualization of how k % array.length works (dynamic small graphic or text output).
3.	Simple Solution ‚Äî Using Built-in Methods
o	Deep explanation of how to rotate arrays using:
ÔÇß	slice()
ÔÇß	concat()
ÔÇß	splice()
ÔÇß	pop()
o	Show step-by-step flow:
ÔÇß	Calculate split point.
ÔÇß	Extract the tail.
ÔÇß	Extract the head.
ÔÇß	Combine and return.
o	Add syntax-highlighted and runnable example:
o	function rotateArraySimple(nums, k) {
o	    const n = nums.length;
o	    k = k % n; 
o	    const splitIndex = n - k;
o	    const tail = nums.slice(splitIndex);
o	    const head = nums.slice(0, splitIndex);
o	    return tail.concat(head);
o	}
o	console.log(rotateArraySimple([1,2,3,4,5,6,7], 3));
o	// Output: [5, 6, 7, 1, 2, 3, 4]
o	Learners can modify the input in a live code editor and see updated outputs instantly.
4.	Advanced Solution ‚Äî The Optimal In-Place Reversal Method
o	Explain space optimization and why in-place methods are better.
o	Include a table comparing:
ÔÇß	Time Complexity
ÔÇß	Space Complexity
ÔÇß	Readability
o	Teach the Three-Step Reversal Algorithm in detail:
1.	Reverse the entire array.
2.	Reverse the first k elements.
3.	Reverse the remaining n - k elements.
o	Include an animated visual showing each reversal phase.
5.	In-Place Function Example (Step-by-Step Implementation)
o	Code example with inline explanation:
o	function rotateArrayInPlace(nums, k) {
o	    const n = nums.length;
o	    k = k % n; 
o	    
o	    function reverse(arr, start, end) {
o	        while (start < end) {
o	            [arr[start], arr[end]] = [arr[end], arr[start]];
o	            start++;
o	            end--;
o	        }
o	    }
o	
o	    if (k === 0 || n === 0) return nums;
o	
o	    reverse(nums, 0, n - 1);
o	    reverse(nums, 0, k - 1);
o	    reverse(nums, k, n - 1);
o	    return nums; 
o	}
o	
o	let nums = [1, 2, 3, 4, 5, 6, 7];
o	rotateArrayInPlace(nums, 3);
o	console.log(nums);
o	// Output: [5, 6, 7, 1, 2, 3, 4]
o	Allow the code to be editable and runnable directly in the browser.
o	If a syntax error occurs, the editor should display a clear and helpful message such as:
‚ÄúCheck your loop condition or your array index boundaries.‚Äù
6.	Comparative Analysis Table
Method	Approach	Space Used	Time Complexity	Ease of Understanding
Slice & Concat	New array creation	O(n)	O(n)	Easy
In-Place Reversal	Mutates original	O(1)	O(n)	Moderate
7.	Try It Yourself
o	Real working code editor (Monaco or CodeMirror)
o	Preloaded with the function but allows users to change:
ÔÇß	Array values
ÔÇß	Rotation number (k)
o	‚ÄúRun Code‚Äù button ‚Üí Displays the new array and shows explanation text dynamically.

üß≠ Navigation & Integration
‚Ä¢	Add this new topic as a subpage under ‚ÄúAdvanced Function Applications‚Äù in the site‚Äôs navigation.
‚Ä¢	The navbar should automatically highlight this section when active.
‚Ä¢	The layout, typography, and color scheme should match the site‚Äôs current UI perfectly.
‚Ä¢	Include small loading animations when navigating between this and other function lessons.
‚Ä¢	Ensure the new page is fully responsive on mobile, tablet, and desktop (412√ó915 tested).

üß† Learning Outcome
After completing this lesson, learners should be able to:
‚Ä¢	Understand and implement array rotation using both simple and optimal methods.
‚Ä¢	Apply modulo arithmetic to handle over-rotation logically.
‚Ä¢	Use function composition to structure reusable code blocks.
‚Ä¢	Differentiate between in-place and non-in-place algorithmic approaches.
‚Ä¢	Confidently handle interview-level function problems.

‚öôÔ∏è Technical Stack to Use
‚Ä¢	Frontend: React + TypeScript (if existing setup uses it, otherwise JavaScript)
‚Ä¢	Styling: Tailwind CSS or CSS Modules (match existing style)
‚Ä¢	Code Editor: Monaco Editor / CodeMirror (functional with error handling)
‚Ä¢	Hosting: Netlify
‚Ä¢	Responsiveness: Must render perfectly on:
o	412√ó915 (mobile)
o	768√ó1024 (tablet)
o	1920√ó1080 (desktop)

‚úÖ Final Requirements
‚Ä¢	Integrate this new topic without disrupting existing lessons.
‚Ä¢	Use organic, original explanations ‚Äî no plagiarism.
‚Ä¢	Ensure grammar and flow are polished and professional.
‚Ä¢	Code examples must be runnable, logical, and relevant.
‚Ä¢	Use animations and transitions subtly to enhance understanding.
‚Ä¢	The hero and footer design should remain consistent with other pages.
‚Ä¢	Everything must work ‚Äî no dummy data, no placeholder examples.
